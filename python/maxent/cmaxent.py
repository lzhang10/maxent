# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
maxent - Python binding for C++ Conditional Maximum Entropy Model.

"""

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _cmaxent
else:
    import _cmaxent

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class MaxentModel(object):
    r"""Proxy of C++ maxent::MaxentModel class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""
        __init__(self) -> MaxentModel
        Create an empty MaxentModel instance
        """
        _cmaxent.MaxentModel_swiginit(self, _cmaxent.new_MaxentModel())

    def __str__(self):
        r"""
        __str__(self) -> char *
        Create an empty MaxentModel instance
        """
        return _cmaxent.MaxentModel___str__(self)

    def load(self, model):
        r"""
        load(self, model)
        Load a MaxentModel from a file
        """
        return _cmaxent.MaxentModel_load(self, model)

    def save(self, model, binary=False):
        r"""
        save(self, model, binary=False)

                         Save current model to a file.
                         Parameters:
                         model   The filename of the model to save.
                         binary  If true, the file is saved in binary format, which is
                         usually smaller (if compiled with libz) and much faster to
                         load.
        """
        return _cmaxent.MaxentModel_save(self, model, binary)

    def eval(self, context, outcome):
        r"""
        eval(self, context, outcome) -> double

                                  This method calculates the conditional probability p(y|x) for given x
                                  (context) and y (outcome).

                                  Parameters:
                                  context  A list of pair (string,  float) indicates names of the contextual
                                  predicates and their values which are to be evaluated together.
                                  outcome  The outcome label for which the conditional probability is
                                  calculated.

                                  If only string context is given, their values are assumed to be 1.0

                                  Returns:
                                  The conditional probability of p(outcome|context).
        """
        return _cmaxent.MaxentModel_eval(self, context, outcome)

    def predict(self, context):
        r"""
        predict(self, context) -> maxent::MaxentModel::outcome_type

                                           Evaluates a context,  return the most possible outcome y for given context x.
        """
        return _cmaxent.MaxentModel_predict(self, context)

    def begin_add_event(self):
        r"""
        begin_add_event(self)

                                                    Signal the begining of adding event (the start of training).

                                                    This method must be called before adding any event to the model. It informs
                                                    the model the beginning of training.

                                                    After the last event is added end_add_event() must be called to indicate the
                                                    ending of adding events.
        """
        return _cmaxent.MaxentModel_begin_add_event(self)

    def add_event(self, *args):
        r"""
        add_event(self, context, outcome, count=1)

                                                             Add an event (context, outcome, count) to current model for training later.

                                                             add_event() should be called after calling begin_add_event().

                                                             Parameters:
                                                             context  A list of pair (string, float) to indicate the context
                                                             predicates and their values (must be >= 0) occured in the event. Feature value
                                                             is assumed to be 1.0 if omitted.
                                                             outcome  A string indicates the outcome label.
                                                             count  How many times this event occurs in training set. default = 1
        """
        return _cmaxent.MaxentModel_add_event(self, *args)

    def add_heldout_event(self, context, outcome, count=1):
        r"""
        add_heldout_event(self, context, outcome, count=1)

                                                             Add an event (context, outcome, count) to current model for training later.

                                                             add_event() should be called after calling begin_add_event().

                                                             Parameters:
                                                             context  A list of pair (string, float) to indicate the context
                                                             predicates and their values (must be >= 0) occured in the event. Feature value
                                                             is assumed to be 1.0 if omitted.
                                                             outcome  A string indicates the outcome label.
                                                             count  How many times this event occurs in training set. default = 1
        """
        return _cmaxent.MaxentModel_add_heldout_event(self, context, outcome, count)

    def end_add_event(self, cutoff=1):
        r"""
        end_add_event(self, cutoff=1)

                                                             Signal the ending of adding events.

                                                             This method must be called after adding of the last event to inform the model
                                                             the ending of the adding events.

                                                             Parameters:
                                                             cutoff  Event cutoff,  all events that occurs less than cutoff times will be
                                                             discussed. Default = 1 (remain all events). Please note this is different from
                                                             the usual sense of *feature cutoff*.
        """
        return _cmaxent.MaxentModel_end_add_event(self, cutoff)

    def train(self, *args):
        r"""
        train(self, iter=15, method="lbfgs", sigma2=0.0, tol=1E-05)

                                                             Train a ME model using selected training method.

                                                             Parameters:
                                                             iter  Specify how many iterations are need for iterative methods. Default
                                                             is 15 iterations.
                                                             method  The training method to use. Can be 'lbfgs' or 'gis'. L-BFGS is used
                                                             as the default training method.
                                                             sigma2  Global variance (sigma^2) in Gaussian prior smoothing. Default is 0,  which
                                                             turns off Gaussian smoothing.
                                                             tol  Tolerance for detecting model convergence. Read manual for details.

        """
        return _cmaxent.MaxentModel_train(self, *args)

    def eval_all(self, context):
        r"""
        eval_all(self, context) -> std::vector< pair< maxent::MaxentModel::outcome_type,double > >

                                                             Evaluates a context, return the conditional distribution of given context
                                                             as a list of (outcome, probability) pairs.

                                                             This method calculates the conditional probability p(y|x) for each possible
                                                             outcome tag y.

                                                             Parameters:
                                                             context  A list of string names of the contextual predicates which are to
                                                             be evaluated together. Feature values are assumed to be 1.0 if omitted.

        """
        return _cmaxent.MaxentModel_eval_all(self, context)
    __swig_destroy__ = _cmaxent.delete_MaxentModel

# Register MaxentModel in _cmaxent:
_cmaxent.MaxentModel_swigregister(MaxentModel)
cvar = _cmaxent.cvar



